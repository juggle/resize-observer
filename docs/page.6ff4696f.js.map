{"version":3,"sources":["../../src/utils/prettify.ts","../../src/utils/scheduler.ts","../../src/ResizeObserverBoxOptions.ts","../../src/DOMRectReadOnly.ts","../../src/utils/element.ts","../../src/algorithms/calculateBoxSize.ts","../../src/ResizeObservation.ts","../../src/ResizeObserverDetail.ts","../../src/algorithms/hasActiveObservations.ts","../../src/algorithms/hasSkippedObservations.ts","../../src/algorithms/deliverResizeLoopError.ts","../../src/ResizeObserverEntry.ts","../../src/algorithms/calculateDepthForNode.ts","../../src/algorithms/broadcastActiveObservations.ts","../../src/algorithms/gatherActiveObservationsAtDepth.ts","../../src/ResizeObserverController.ts","../../src/ResizeObserver.ts","page.js"],"names":["perfArea","document","getElementById","perfFragment","createDocumentFragment","perfCount","ticks","ro","ResizeObserver","entries","forEach","entry","target","parentElement","innerText","contentBoxSize","inlineSize","blockSize","setAttribute","Math","round","querySelectorAll","el","innerHTML","trim","i","createElement","appendChild","addEventListener","toggleAttribute","observe"],"mappings":"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","file":"page.6ff4696f.js","sourceRoot":"src","sourcesContent":["const POLYFILL_CONSOLE_OUTPUT = 'function ResizeObserver () { [polyfill code] }';\n\nconst prettifyConsoleOutput = <T>(fn: T): T => {\n  Object.defineProperty(fn, 'toString', {\n    value: (): string => POLYFILL_CONSOLE_OUTPUT\n  })\n  return fn;\n}\n\nexport { POLYFILL_CONSOLE_OUTPUT, prettifyConsoleOutput };\n","import { process } from '../ResizeObserverController';\nimport { prettifyConsoleOutput } from './prettify';\n\nconst CATCH_FRAMES = 60 / 5; // Fifth of a second\n\n// Keep original reference of raf to use later\nconst requestAnimationFrame = window.requestAnimationFrame;\n\nconst observerConfig = { attributes: true, characterData: true, childList: true, subtree: true };\n\nconst events = [\n  // Global Resize\n  'resize',\n  // Global Load\n  'load',\n  // Transitions & Animations\n  'transitionend',\n  'animationend',\n  'animationstart',\n  'animationiteration',\n  // Interactions\n  'keyup',\n  'keydown',\n  'mouseup',\n  'mousedown',\n  'mouseover',\n  'mouseout',\n  'blur',\n  'focus'\n];\n\nconst rafSlot = new Map();\nconst resizeObserverSlot = new Map();\n\nlet scheduled: boolean;\nconst dispatchCallbacksOnNextFrame = (): void => {\n  if (scheduled) {\n    return;\n  }\n  scheduled = true;\n  function runSchedule(t: number): void {\n    scheduled = false;\n    const frameCallbacks: FrameRequestCallback[] = [];\n    const resizeObserverCallbacks: FrameRequestCallback[] = [];\n    rafSlot.forEach((callback): number => frameCallbacks.push(callback));\n    resizeObserverSlot.forEach((callback): number => resizeObserverCallbacks.push(callback));\n    rafSlot.clear(); resizeObserverSlot.clear();\n    try { // Try to run animation frame callbacks\n      for (let callback of frameCallbacks) {\n        callback(t);\n      }\n    }\n    finally { // Finally, run schedule\n      for (let callback of resizeObserverCallbacks) {\n        callback(t);\n      }\n    }\n  };\n  requestAnimationFrame(runSchedule)\n}\n\nclass Scheduler {\n\n  private observer: MutationObserver | undefined;\n  private listener: () => void;\n  public stopped: boolean = true;\n\n  public constructor () {\n    this.listener = (): void => this.schedule();\n  }\n\n  public run (frames: number): void {\n    const scheduler = this;\n    resizeObserverSlot.set(this, function ResizeObserver (): void {\n      let elementsHaveResized = false;\n      try {\n        // Process Calculations\n        elementsHaveResized = process();\n      }\n      finally {\n        // Have any changes happened?\n        if (elementsHaveResized) {\n          scheduler.run(60);\n        }\n        // Should we continue to check?\n        else if (frames) {\n          scheduler.run(frames - 1);\n        }\n        // Start listening again\n        else {\n          scheduler.start();\n        }\n      }\n    });\n    dispatchCallbacksOnNextFrame();\n  }\n\n  public schedule (): void {\n    this.stop(); // Stop listeneing\n    this.run(CATCH_FRAMES); // Run schedule\n  }\n\n  private observe (): void {\n    const cb = (): void => this.observer && this.observer.observe(document.body, observerConfig);\n    /* istanbul ignore next */\n    document.body ? cb() : window.addEventListener('DOMContentLoaded', cb);\n  }\n\n  public start (): void {\n    if (this.stopped) {\n      this.stopped = false;\n      if ('MutationObserver' in window) {\n        this.observer = new MutationObserver(this.listener);\n        this.observe();\n      }\n      events.forEach((name): void => window.addEventListener(name, this.listener, true));\n    }\n  }\n\n  public stop (): void {\n    if (!this.stopped) {\n      this.observer && this.observer.disconnect();\n      events.forEach((name): void => window.removeEventListener(name, this.listener, true));\n      this.stopped = true;\n    }\n  }\n}\n\nconst scheduler = new Scheduler();\nlet rafIdBase = 0;\n\n// Override requestAnimationFrame to make sure\n// calculations are performed after any changes may occur.\n// * Is there another way to schedule without modifying the whole function?\nwindow.requestAnimationFrame = function (callback): number {\n  if (typeof callback !== 'function') {\n    throw new Error('requestAnimationFrame expects 1 callback argument of type function.');\n  }\n  const handle = rafIdBase += 1;\n  rafSlot.set(handle, function AnimationFrame (t: number): void { return callback(t) });\n  dispatchCallbacksOnNextFrame();\n  return handle;\n}\n// Override cancelAnimationFrame\n// as we need to handle custom removal\nwindow.cancelAnimationFrame = function (handle): void {\n  rafSlot.delete(handle);\n}\nprettifyConsoleOutput(window.requestAnimationFrame);\nprettifyConsoleOutput(window.cancelAnimationFrame);\n\nexport { scheduler };\n","/**\n * Used to observe different box sizes.\n * \n * https://drafts.csswg.org/resize-observer-1/#enumdef-resizeobserverboxoptions\n */\nenum ResizeObserverBoxOptions {\n  BORDER_BOX = 'border-box',\n  CONTENT_BOX = 'content-box'\n}\n\nexport { ResizeObserverBoxOptions };","interface Rectangle {\n  readonly x: number;\n  readonly y: number;\n  readonly width: number;\n  readonly height: number;\n}\n\n/**\n * Implementation of DOMRectReadOnly.\n * Native DOMRectReadOnly cannot be used.\n */\nclass DOMRectReadOnly {\n  public readonly x: number;\n  public readonly y: number;\n  public readonly width: number;\n  public readonly height: number;\n  public readonly top: number;\n  public readonly left: number;\n  public readonly bottom: number;\n  public readonly right: number;\n  public constructor (x: number, y: number, width: number, height: number) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    this.top = this.y;\n    this.left = this.x;\n    this.bottom = this.top + this.height;\n    this.right = this.left + this.width;\n    return Object.freeze(this);\n  }\n  public static fromRect (rectangle: Rectangle): Readonly<DOMRectReadOnly> {\n    return new DOMRectReadOnly(rectangle.x, rectangle.y, rectangle.width, rectangle.height);\n  }\n}\n\nexport { DOMRectReadOnly };\n","// Tests if target is an SVGGraphicsElement\nconst isSVG = (target: Element): boolean => target instanceof SVGElement && 'getBBox' in target;\n\n// Checks to see if element is hidden (has no display)\nconst isHidden = (target: Element): boolean => {\n  if (isSVG(target)) {\n    const { width, height } = (target as SVGGraphicsElement).getBBox();\n    return !width && !height;\n  }\n  const { offsetWidth, offsetHeight } = target as HTMLElement;\n  return !(offsetWidth || offsetHeight || target.getClientRects().length);\n}\n\nexport {\n  isSVG,\n  isHidden\n};\n","import { ResizeObserverBoxOptions } from '../ResizeObserverBoxOptions';\nimport { ResizeObserverSize } from '../ResizeObserverSize';\nimport { DOMRectReadOnly } from '../DOMRectReadOnly';\nimport { isSVG, isHidden } from '../utils/element';\n\ninterface ResizeObserverSizeCollection {\n  borderBoxSize: ResizeObserverSize;\n  contentBoxSize: ResizeObserverSize;\n  contentRect: DOMRectReadOnly;\n}\n\nconst cache = new Map();\nconst scrollRegexp = /auto|scroll/;\nconst IE = (/msie|trident/i).test(navigator.userAgent);\nconst parseDimension = (pixel: string | null): number => parseFloat(pixel || '0');\n\n// Helper to generate and freeze a ResizeObserverSize\nconst size = (inlineSize: number = 0, blockSize: number = 0): ResizeObserverSize => {\n  return Object.freeze({ inlineSize, blockSize });\n}\n\n// Return this when targets are hidden\nconst zeroBoxes = Object.freeze({\n  borderBoxSize: size(),\n  contentBoxSize: size(),\n  contentRect: new DOMRectReadOnly(0, 0, 0, 0)\n})\n\n/**\n * Gets all box sizes of an element.\n */\nconst calculateBoxSizes = (target: Element): ResizeObserverSizeCollection => {\n\n  // Check cache to prevent recalculating styles.\n  if (cache.has(target)) {\n    return cache.get(target);\n  }\n\n  // If the target is hidden, send zero\n  if (isHidden(target)) {\n    cache.set(target, zeroBoxes);\n    return zeroBoxes;\n  }\n\n  const cs = getComputedStyle(target);\n\n  // If element is an SVG, handle things differently, using its bounding box.\n  const svg = isSVG(target) && (target as SVGGraphicsElement).getBBox();\n\n  // IE does not remove padding from width/height, when box-sizing is border-box.\n  const removePadding = !IE && cs.boxSizing === 'border-box';\n\n  // Could the element have any scrollbars?\n  const canScrollVertically = !svg && scrollRegexp.test(cs.overflowY || '');\n  const canScrollHorizontally = !svg && scrollRegexp.test(cs.overflowX || '');\n\n  // Calculate properties for creating boxes.\n  const paddingTop = svg ? 0 : parseDimension(cs.paddingTop);\n  const paddingRight = svg ? 0 : parseDimension(cs.paddingRight);\n  const paddingBottom = svg ? 0 : parseDimension(cs.paddingBottom);\n  const paddingLeft = svg ? 0 : parseDimension(cs.paddingLeft);\n  const borderTop = svg ? 0 : parseDimension(cs.borderTopWidth);\n  const borderRight = svg ? 0 : parseDimension(cs.borderRightWidth);\n  const borderBottom = svg ? 0 : parseDimension(cs.borderBottomWidth);\n  const borderLeft = svg ? 0 : parseDimension(cs.borderLeftWidth);\n  const horizontalPadding = paddingLeft + paddingRight;\n  const verticalPadding = paddingTop + paddingBottom;\n  const horizontalBorderArea = borderLeft + borderRight;\n  const verticalBorderArea = borderTop + borderBottom;\n  const horizontalScrollbarThickness = !canScrollHorizontally ? 0 : (target as HTMLElement).offsetHeight - verticalBorderArea - target.clientHeight;\n  const verticalScrollbarThickness = !canScrollVertically ? 0 : (target as HTMLElement).offsetWidth - horizontalBorderArea - target.clientWidth;\n  const widthReduction = removePadding ? horizontalPadding + horizontalBorderArea : 0;\n  const heightReduction = removePadding ? verticalPadding + verticalBorderArea : 0;\n  const contentWidth = svg ? svg.width : parseDimension(cs.width) - widthReduction - verticalScrollbarThickness;\n  const contentHeight = svg ? svg.height : parseDimension(cs.height) - heightReduction - horizontalScrollbarThickness;\n  const borderBoxWidth = contentWidth + horizontalPadding + verticalScrollbarThickness + horizontalBorderArea;\n  const borderBoxHeight = contentHeight + verticalPadding + horizontalScrollbarThickness + verticalBorderArea;\n\n  const boxes = Object.freeze({\n    borderBoxSize: size(borderBoxWidth, borderBoxHeight),\n    contentBoxSize: size(contentWidth, contentHeight),\n    contentRect: new DOMRectReadOnly(paddingLeft, paddingTop, contentWidth, contentHeight)\n  });\n\n  cache.set(target, boxes);\n\n  return boxes;\n};\n\n/**\n * Calculates the observe box size of an element.\n * \n * https://drafts.csswg.org/resize-observer-1/#calculate-box-size\n */\nconst calculateBoxSize = (target: Element, observedBox: ResizeObserverBoxOptions): ResizeObserverSize => {\n  const { borderBoxSize, contentBoxSize } = calculateBoxSizes(target);\n  return observedBox === ResizeObserverBoxOptions.BORDER_BOX ? borderBoxSize : contentBoxSize;\n};\n\nexport { calculateBoxSize, calculateBoxSizes, cache };\n","import { ResizeObserverSize } from './ResizeObserverSize';\nimport { ResizeObserverBoxOptions } from './ResizeObserverBoxOptions';\nimport { calculateBoxSize } from './algorithms/calculateBoxSize';\n\n/**\n * https://drafts.csswg.org/resize-observer-1/#resize-observation-interface\n */\nclass ResizeObservation {\n\n  public target: Element;\n  public observedBox: ResizeObserverBoxOptions;\n  public lastReportedSize: ResizeObserverSize;\n\n  public constructor (target: Element, observedBox?: ResizeObserverBoxOptions) {\n    this.target = target;\n    this.observedBox = observedBox || ResizeObserverBoxOptions.CONTENT_BOX;\n    this.lastReportedSize = {\n      inlineSize: 0,\n      blockSize: 0\n    }\n  }\n\n  public isActive (): boolean {\n    const last = this.lastReportedSize;\n    const size = calculateBoxSize(this.target, this.observedBox);\n    if (last.inlineSize !== size.inlineSize || last.blockSize !== size.blockSize) {\n      return true;\n    }\n    return false;\n  }\n\n}\n\nexport { ResizeObservation };\n","import { ResizeObserver } from './ResizeObserver';\nimport { ResizeObservation } from './ResizeObservation';\nimport { ResizeObserverCallback } from './ResizeObserverCallback';\n\n/**\n * Holds additional information about a resize observer,\n * to be used internally.\n */\nclass ResizeObserverDetail {\n  public callback: ResizeObserverCallback;\n  public observer: ResizeObserver;\n  public activeTargets: ResizeObservation[] = [];\n  public skippedTargets: ResizeObservation[] = [];\n  public observationTargets: ResizeObservation[] = [];\n\n  public constructor (resizeObserver: ResizeObserver, callback: ResizeObserverCallback) {\n    this.observer = resizeObserver;\n    this.callback = callback;\n  }\n}\n\nexport { ResizeObserverDetail };\n","import { resizeObservers } from '../ResizeObserverController';\nimport { ResizeObserverDetail } from '../ResizeObserverDetail';\n\n/**\n * Checks to see if there are any active observations.\n * \n * https://drafts.csswg.org/resize-observer-1/#has-active-observations-h\n */\nconst hasActiveObservations = (): boolean => {\n  return resizeObservers.some((ro: ResizeObserverDetail): boolean => ro.activeTargets.length > 0);\n}\n\nexport { hasActiveObservations };\n","import { resizeObservers } from '../ResizeObserverController';\nimport { ResizeObserverDetail } from '../ResizeObserverDetail';\n\n/**\n * Checks to see if there are any skipped observations.\n * This is used to deliver the resize loop error.\n * \n * https://drafts.csswg.org/resize-observer-1/#has-skipped-observations-h\n */\nconst hasSkippedObservations = (): boolean => {\n  return resizeObservers.some((ro: ResizeObserverDetail): boolean => ro.skippedTargets.length > 0);\n}\n\nexport { hasSkippedObservations }\n","const msg = 'ResizeObserver loop completed with undelivered notifications.';\n\ninterface LegacyEvent extends Event {\n  message: string;\n}\n\n/**\n * Delivers a resize loop error event.\n * \n * https://drafts.csswg.org/resize-observer-1/#deliver-resize-error\n */\nconst deliverResizeLoopError = (): void => {\n  let event;\n  /* istanbul ignore else  */\n  if (typeof ErrorEvent === 'function') {\n    event = new ErrorEvent('error', {\n      message: msg\n    });\n  }\n  else { // Fallback to old style of event creation\n    event = document.createEvent('Event') as LegacyEvent;\n    event.initEvent('error', false, false);\n    event.message = msg;\n  }\n  window.dispatchEvent(event);\n}\n\nexport { deliverResizeLoopError };\n","import { DOMRectReadOnly } from './DOMRectReadOnly';\nimport { ResizeObserverSize } from './ResizeObserverSize';\nimport { calculateBoxSizes } from './algorithms/calculateBoxSize';\n\n/**\n * https://drafts.csswg.org/resize-observer-1/#resize-observer-entry-interface\n */\nclass ResizeObserverEntry {\n  public target: Element;\n  public contentRect: DOMRectReadOnly;\n  public borderBoxSize: ResizeObserverSize;\n  public contentBoxSize: ResizeObserverSize;\n  public constructor (target: Element) {\n    const boxes = calculateBoxSizes(target);\n    this.target = target;\n    this.contentRect = boxes.contentRect;\n    this.borderBoxSize = boxes.borderBoxSize;\n    this.contentBoxSize = boxes.contentBoxSize;\n  }\n}\n\nexport { ResizeObserverEntry };\n","import { isHidden } from '../utils/element';\n/**\n * Calculates the depth of a node.\n * \n * https://drafts.csswg.org/resize-observer-1/#calculate-depth-for-node-h\n */\nconst calculateDepthForNode = (node: Element): number => {\n  if (isHidden(node)) {\n    return Infinity;\n  }\n  let depth = 0;\n  let parent = node.parentNode;\n  while (parent) {\n    depth += 1;\n    parent = parent.parentNode;\n  }\n  return depth;\n}\n\nexport { calculateDepthForNode };\n","import { resizeObservers } from '../ResizeObserverController';\nimport { ResizeObserverDetail } from '../ResizeObserverDetail';\nimport { ResizeObserverEntry } from '../ResizeObserverEntry';\nimport { ResizeObservation } from '../ResizeObservation';\nimport { calculateDepthForNode } from './calculateDepthForNode';\nimport { calculateBoxSize } from './calculateBoxSize';\n\n/**\n * Broadcasts all active observations.\n * \n * https://drafts.csswg.org/resize-observer-1/#broadcast-resize-notifications-h\n */\nconst broadcastActiveObservations = (): number => {\n  let shallowestDepth = Infinity;\n  const callbacks: (() => void)[] = [];\n  resizeObservers.forEach(function processObserver(ro: ResizeObserverDetail): void {\n    if (ro.activeTargets.length === 0) {\n      return;\n    }\n    const entries: ResizeObserverEntry[] = [];\n    ro.activeTargets.forEach(function processTarget(ot: ResizeObservation): void {\n      const entry = new ResizeObserverEntry(ot.target);\n      const targetDepth = calculateDepthForNode(ot.target);\n      entries.push(entry);\n      ot.lastReportedSize = calculateBoxSize(ot.target, ot.observedBox);\n      if (targetDepth < shallowestDepth) {\n        shallowestDepth = targetDepth;\n      }\n    })\n    // Gather all entries before firing callbacks\n    // otherwise entries may change in the same loop\n    callbacks.push(function resizeObserverCallback(): void { ro.callback(entries, ro.observer) });\n    ro.activeTargets.splice(0, ro.activeTargets.length);\n  })\n  for (let callback of callbacks) {\n    callback();\n  }\n  return shallowestDepth;\n}\n\nexport { broadcastActiveObservations };\n","import { ResizeObservation } from '../ResizeObservation';\nimport { ResizeObserverDetail } from '../ResizeObserverDetail';\nimport { resizeObservers } from '../ResizeObserverController';\nimport { calculateDepthForNode } from './calculateDepthForNode';\nimport { cache as sizeCache } from './calculateBoxSize';\n\n/**\n * Finds all active observations at a give depth\n * \n * https://drafts.csswg.org/resize-observer-1/#gather-active-observations-h\n */\nconst gatherActiveObservationsAtDepth = (depth: number): void => {\n  sizeCache.clear(); // clear target size cache\n  resizeObservers.forEach(function processObserver(ro: ResizeObserverDetail): void {\n    ro.activeTargets.splice(0, ro.activeTargets.length);\n    ro.skippedTargets.splice(0, ro.skippedTargets.length);\n    ro.observationTargets.forEach(function processTarget(ot: ResizeObservation): void {\n      if (ot.isActive()) {\n        if (calculateDepthForNode(ot.target) > depth) {\n          ro.activeTargets.push(ot);\n        }\n        else {\n          ro.skippedTargets.push(ot);\n        }\n      }\n    })\n  })\n}\n\nexport { gatherActiveObservationsAtDepth };\n","import { scheduler } from './utils/scheduler';\n\nimport { ResizeObserver } from './ResizeObserver';\nimport { ResizeObservation } from './ResizeObservation';\nimport { ResizeObserverDetail } from './ResizeObserverDetail';\nimport { ResizeObserverCallback } from './ResizeObserverCallback';\nimport { ResizeObserverOptions } from './ResizeObserverOptions';\n\nimport { hasActiveObservations } from './algorithms/hasActiveObservations';\nimport { hasSkippedObservations } from './algorithms/hasSkippedObservations';\nimport { deliverResizeLoopError } from './algorithms/deliverResizeLoopError';\nimport { broadcastActiveObservations } from './algorithms/broadcastActiveObservations';\nimport { gatherActiveObservationsAtDepth } from './algorithms/gatherActiveObservationsAtDepth';\n\nconst resizeObservers: ResizeObserverDetail[] = [];\nconst observerMap = new Map();\nlet watching = 0;\n\nconst updateCount = (n: number): void => {\n  !watching && n > 0 && scheduler.start();\n  watching += n;\n  !watching && scheduler.stop();\n}\n\n// Helper to find the correct ResizeObservation, based on a target.\nconst getObservationIndex = (observationTargets: ResizeObservation[], target: Element): number => {\n  for (let i = 0; i < observationTargets.length; i+= 1) {\n    if (observationTargets[i].target === target) {\n      return i;\n    }\n  }\n  return -1;\n}\n\n/**\n * Runs through the algorithms and\n * broadcasts and changes that are returned.\n */\nconst process = (): boolean => {\n  let depth = 0;\n  gatherActiveObservationsAtDepth(depth);\n  while (hasActiveObservations()) {\n    depth = broadcastActiveObservations();\n    gatherActiveObservationsAtDepth(depth);\n  }\n  if (hasSkippedObservations()) {\n    deliverResizeLoopError();\n  }\n  return depth > 0;\n}\n\n/**\n * Used as an interface for connecting resize observers.\n */\nclass ResizeObserverController {\n  // Connects an observer to the controller.\n  public static connect (resizeObserver: ResizeObserver, callback: ResizeObserverCallback): void {\n    const detail = new ResizeObserverDetail(resizeObserver, callback);\n    resizeObservers.push(detail);\n    observerMap.set(resizeObserver, detail);\n  }\n  // Informs the controller to watch a new target.\n  public static observe (resizeObserver: ResizeObserver, target: Element, options?: ResizeObserverOptions): void {\n    if (observerMap.has(resizeObserver)) {\n      const detail = observerMap.get(resizeObserver) as ResizeObserverDetail;\n      if (getObservationIndex(detail.observationTargets, target) < 0) {\n        detail.observationTargets.push(new ResizeObservation(target, options && options.box));\n        updateCount(1);\n        scheduler.schedule(); // Schedule next observation\n      }\n    }\n  }\n  // Informs the controller to stop watching a target.\n  public static unobserve (resizeObserver: ResizeObserver, target: Element): void {\n    if (observerMap.has(resizeObserver)) {\n      const detail = observerMap.get(resizeObserver) as ResizeObserverDetail;\n      const index = getObservationIndex(detail.observationTargets, target);\n      if (index >= 0) {\n        detail.observationTargets.splice(index, 1);\n        updateCount(-1);\n      }\n    }\n  }\n  // Informs the controller to disconnect an observer.\n  public static disconnect (resizeObserver: ResizeObserver): void {\n    if (observerMap.has(resizeObserver)) {\n      const detail = observerMap.get(resizeObserver) as ResizeObserverDetail;\n      resizeObservers.splice(resizeObservers.indexOf(detail), 1);\n      observerMap.delete(resizeObserver);\n      updateCount(-detail.observationTargets.length);\n    }\n  }\n}\n\nexport { ResizeObserverController, resizeObservers, process };\n","import { ResizeObserverController } from './ResizeObserverController';\nimport { ResizeObserverCallback } from './ResizeObserverCallback';\nimport { ResizeObserverOptions } from './ResizeObserverOptions';\nimport { POLYFILL_CONSOLE_OUTPUT } from './utils/prettify';\n\n/**\n * https://drafts.csswg.org/resize-observer-1/#resize-observer-interface\n */\nclass ResizeObserver {\n\n  public constructor (callback: ResizeObserverCallback) {\n    if (arguments.length === 0) {\n      throw new TypeError(`Failed to construct 'ResizeObserver': 1 argument required, but only 0 present.`)\n    }\n    if (typeof callback !== 'function') {\n      throw new TypeError(`Failed to construct 'ResizeObserver': The callback provided as parameter 1 is not a function.`);\n    }\n    ResizeObserverController.connect(this, callback);\n  }\n\n  public observe (target: Element, options?: ResizeObserverOptions): void {\n    if (arguments.length === 0) {\n      throw new TypeError(`Failed to execute 'observe' on 'ResizeObserver': 1 argument required, but only 0 present.`)\n    }\n    if (target instanceof Element === false) {\n      throw new TypeError(`Failed to execute 'observe' on 'ResizeObserver': parameter 1 is not of type 'Element`);\n    }\n    ResizeObserverController.observe(this, target, options);\n  }\n\n  public unobserve (target: Element): void {\n    if (arguments.length === 0) {\n      throw new TypeError(`Failed to execute 'unobserve' on 'ResizeObserver': 1 argument required, but only 0 present.`)\n    }\n    if (target instanceof Element === false) {\n      throw new TypeError(`Failed to execute 'unobserve' on 'ResizeObserver': parameter 1 is not of type 'Element`);\n    }\n    ResizeObserverController.unobserve(this, target);\n  }\n\n  public disconnect (): void {\n    ResizeObserverController.disconnect(this);\n  }\n\n  public static toString (): string {\n    return POLYFILL_CONSOLE_OUTPUT;\n  }\n\n}\nexport default ResizeObserver;\nexport { ResizeObserver };\n","import ResizeObserver from '../../src/ResizeObserver.ts';\n\nconst perfArea = document.getElementById('performance-example');\nconst perfFragment = document.createDocumentFragment();\nconst perfCount = document.getElementById('performance-count');\nlet ticks = 0;\n\nconst ro = new ResizeObserver(entries => {\n  entries.forEach(entry => {\n    if (entry.target.parentElement === perfArea) {\n      ticks += 1;\n      perfCount.innerText = ticks;\n      return;\n    }\n    const { inlineSize, blockSize } = entry.contentBoxSize;\n    entry.target.setAttribute('dimensions', `${Math.round(inlineSize)} x ${Math.round(blockSize)}`);\n  });\n});\n\n[...document.querySelectorAll('pre, code')].forEach(el => {\n  el.innerHTML = el.innerHTML.trim();\n});\n\nfor (let i = 0; i < 200; i += 1) {\n  const el = document.createElement('div');\n  el.setAttribute('resize', '');\n  perfFragment.appendChild(el);\n}\n\nperfArea.appendChild(perfFragment);\n\nperfArea.addEventListener('click', function () {\n  this.toggleAttribute('animate');\n});\n\ndocument.getElementById('transition-example').addEventListener('click', function () {\n  this.toggleAttribute('fill');\n});\n\ndocument.getElementById('animation-example').addEventListener('click', function () {\n  this.toggleAttribute('animate');\n});\n\n[...document.querySelectorAll('[resize]')].forEach(el => ro.observe(el));\n"]}